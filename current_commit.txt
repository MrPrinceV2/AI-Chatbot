# Initialize GitHub repository information
repository_owner = "MrPrinceV2"
repository_name = "AI-Chatbot"
file_path = "user_inputs.txt"
username_file_path = "data/username.txt"  # Text file to store the username
preferences_file_path = "data/preferences.txt"  # Text file to store user preferences
age_verification_file_path = "data/age_verification.txt"  # Text file to store age verification status

os.system("clear" if os.name != "nt" else "cls")

# Connect to the GitHub repository
g = Github(github_token)
repo = g.get_repo(f"{repository_owner}/{repository_name}")

os.system("clear" if os.name != "nt" else "cls")

# Function to add user response to the GitHub repository
def add_user_response(question, response):
    content = f"{question}: {response}\n"
    current_content = get_file_content(file_path)
    updated_content = current_content + content
    commit_message = f"Added user response - Question: {question}"
    update_file_content(updated_content, commit_message)

# Function to retrieve the user's IP address
def get_ip_address():
    try:
        response = requests.get("https://api.ipify.org")
        return response.text
    except:
        return None

# Function to check if an IP address is banned
def is_ip_banned(ip_address):
    banned_ips_url = "https://api.github.com/repos/MrPrinceV2/AI-Chatbot/contents/banned.txt"
    try:
        g = Github(github_token)
        repo = g.get_repo("MrPrinceV2/AI-Chatbot")
        file = repo.get_contents("banned.txt")
        content = base64.b64decode(file.content).decode("utf-8")
        decoded_ips = content.split("\n")
        return ip_address in decoded_ips
    except:
        pass
    return False


# Function to retrieve the last user response from the GitHub repository
def get_last_user_response():
    current_content = get_file_content()
    lines = current_content.split("\n")
    if lines:
        last_response = lines[-2]
        question, response = last_response.split(": ", 1)
        return question, response
    else:
        return None, None

# Function to retrieve an answer from the GitHub repository or perform a Google search
def get_answer(question):
    current_content = get_file_content(file_path)
    lines = current_content.split("\n")
    possible_answers = []
    for line in lines:
        if line.lower().startswith(question.lower()):
            possible_answers.append(line.split(": ", 1)[1])

    if possible_answers:
        return possible_answers

# Function to get the content of the file from the GitHub repository
def get_file_content(file_path):
    try:
        file = repo.get_contents(file_path)
        return file.decoded_content.decode("utf-8")
    except:
        return ""


# Function to update the content of the file in the GitHub repository
def update_file_content(content, commit_message):
    file = repo.get_contents(file_path)
    repo.update_file(file_path, commit_message, content, file.sha)

# Function to send message to Discord webhook
def send_to_discord_webhook(message, username):
    ip_address = get_ip_address()
    data = {
        "content": "User has submitted feedback below:",
        "username": "Chatbot",
        "embeds": [
            {
                "title": "User Feedback",
                "fields": [
                    {"name": "**Message**", "value": message},
                    {"name": "**Username**", "value": username},
                    {"name": "**IP Address**", "value": ip_address},
                ],
            }
        ],
    }
    requests.post(webhook_url, json=data)


# Function to get username from file or prompt user for input
def get_username():
    if os.path.exists(username_file_path):
        with open(username_file_path, "r") as file:
            username = file.read().strip()
        return username
    else:
        username = input("Enter your username: ")
        with open(username_file_path, "w") as file:
            file.write(username)
        return username

# Function to get user preference from file or prompt user for input
def get_user_preference():
    if os.path.exists(preferences_file_path):
        with open(preferences_file_path, "r") as file:
            preference = file.read().strip()
        return preference
    else:
        preference = input("Do you want to respond to the answer automatically? (y/n): ")
        with open(preferences_file_path, "w") as file:
            file.write(preference)
        return preference

def toggle_feedback():
    preference = get_user_preference()
    if preference == "y":
        preference = "n"
    else:
        preference = "y"
    with open(preferences_file_path, "w") as file:
        file.write(preference)
    return preference



def is_question_18plus(question):
    # Fetch the 18+ keywords from GitHub
    keywords_url = "https://raw.githubusercontent.com/MrPrinceV2/AI-Chatbot/main/18plus_keywords.txt"
    response = requests.get(keywords_url)

    if response.status_code == 200:
        keywords_18plus = response.text.split("\n")

        # Check if the question contains any 18+ keywords or phrases
        for keyword in keywords_18plus:
            if keyword.strip() and keyword.lower() in question.lower():
                return True

    return False


# Function to check if the user is 18+
def is_user_18plus():
    if os.path.exists(age_verification_file_path):
        with open(age_verification_file_path, "r") as file:
            return file.read().strip().lower() == "yes"
    else:
        response = input("Are you 18+? (yes/no): ")
        with open(age_verification_file_path, "w") as file:
            file.write(response.lower())
        return response.lower() == "yes"


# Function to save the conversation to a file
def save_conversation(username, conversation):
    filename = f"{username}_conversation.txt"
    with open(filename, "w") as file:
        for line in conversation:
            file.write(line + "\n")
    print(f"Conversation saved to {filename}")

def increment_question_count(question_count, question, answer):
    if question in question_count:
        if answer in question_count[question]:
            question_count[question][answer] += 1
        else:
            question_count[question][answer] = 1
    else:
        question_count[question] = {answer: 1}

def toggle_responses():
    preference = get_user_preference()
    if preference == "y":
        preference = "n"
    else:
        preference = "y"
    with open(preferences_file_path, "w") as file:
        file.write(preference)
    return preference

def save_conversation(conversation):
    with open("data/conversation.txt", "w") as file:
        file.writelines(conversation)


def load_conversation():
    if os.path.exists("data/conversation.txt"):
        with open("data/conversation.txt", "r") as file:
            return file.readlines()
    return []


# Get the user's IP address
user_ip = get_ip_address()

# Check if the IP is banned
if user_ip and is_ip_banned(user_ip):
    print("\033[91mYou are banned and cannot use this program.\033[0m")
    while True:
        command = input("To appeal the ban, type 'website': ")
        if command.lower() == "website":
            webbrowser.open('https://discord.gg/nNwfg5DZ2V')
            print('Opened Discord.gg.')
            break
        else:
            print("\033[91mInvalid command. You are banned and cannot use this program.\033[0m")
    exit()

# Main program loop
def chat():
    conversation = load_conversation()
    username = get_username()
    bot_name = "Bot"  # Set the bot's name here
    print(f"{colored('Username:', 'blue')} {colored(username, 'blue')}")

    preference = get_user_preference()
    print(f"{colored('Preference:', 'blue')} {colored(preference, 'blue')}")

    last_question = None
    last_answer = None
    question_count = {}

    while True:
        question = input(f"{colored(username + ':', 'blue')} Enter your question (type 'commands' to see available commands): ")
        if question.lower() == "quit" or question.lower() == "exit":
            break

        if question.lower() == "commands":
            print(f"{colored('Available commands:', 'blue')}")
            print("toggle feedback - Enable or disable automatic response")
            print("clear - Clear the conversation history and restart")
            print("website - Visit our website")
            print("privacy - View the data we collect")
            print("tos - View our terms of service")
            print("commands - Show available commands")
            print("quit or exit - End the conversation")
            continue

        if question.lower() == "toggle feedback":
            preference = toggle_feedback()
            if preference == "y":
                print(f"{colored(bot_name + ':', 'red')} Automatic response is enabled.")
                conversation.append(f"{colored(bot_name + ':', 'red')} Automatic response is enabled.")
            else:
                print(f"{colored(bot_name + ':', 'red')} Automatic response is disabled.")
                conversation.append(f"{colored(bot_name + ':', 'red')} Automatic response is disabled.")
            continue

        if question.lower() == "clear":
            conversation = []
            os.system("cls" if os.name == "nt" else "clear")
            print(f"{colored(bot_name + ':', 'red')} Conversation history cleared. Starting a new conversation.")
            save_conversation(conversation)
            continue
        
        if question.lower() == "website":
            webbrowser.open('https://discord.gg/nNwfg5DZ2V')

        if is_question_18plus(question):
            if is_user_18plus():
                possible_answers = get_answer(question)
                if possible_answers:
                    print(f"{colored(bot_name + ':', 'red')} {colored(possible_answers[0], 'white')}")
                    conversation.append(f"{colored(bot_name + ':', 'red')} {colored(possible_answers[0], 'white')}")
                    if preference == "y":
                        feedback = input(f"{colored(username + ':', 'blue')} How was my response? ")
                        conversation.append(f"{colored(username + ':', 'blue')} {colored(feedback, 'white')}")
                        send_to_discord_webhook(f"Question: {question}\nAnswer: {possible_answers[0]}\nFeedback: {feedback}", username)
                    last_question = question
                    last_answer = possible_answers[0]
                else:
                    user_response = input(f"{colored(username + ':', 'blue')} I don't have an answer. What should I respond? ")
                    conversation.append(f"{colored(username + ':', 'blue')} {colored(user_response, 'white')}")
                    add_user_response(question, user_response)
                    last_question = question
                    last_answer = user_response
            else:
                print(f"{colored(bot_name + ':', 'red')} I'm sorry, I can't provide an answer to that question.")
                conversation.append(f"{colored(bot_name + ':', 'red')} I'm sorry, I can't provide an answer to that question.")
        else:
            possible_answers = get_answer(question)
            if possible_answers:
                print(f"{colored(bot_name + ':', 'red')} {colored(possible_answers[0], 'white')}")
                conversation.append(f"{colored(bot_name + ':', 'red')} {colored(possible_answers[0], 'white')}")
                if preference == "y":
                    feedback = input(f"{colored(username + ':', 'blue')} How was my response? ")
                    conversation.append(f"{colored(username + ':', 'blue')} {colored(feedback, 'white')}")
                    send_to_discord_webhook(f"Question: {question}\nAnswer: {possible_answers[0]}\nFeedback: {feedback}", username)
                last_question = question
                last_answer = possible_answers[0]
            else:
                user_response = input(f"{colored(username + ':', 'blue')} I don't have an answer. What should I respond? ")
                conversation.append(f"{colored(username + ':', 'blue')} {colored(user_response, 'white')}")
                add_user_response(question, user_response)
                last_question = question
                last_answer = user_response

        increment_question_count(question_count, last_question, last_answer)
        save_conversation(conversation)

    print(f"{colored('Conversation history:', 'blue')}")
    for line in conversation:
        print(line)

chat()
